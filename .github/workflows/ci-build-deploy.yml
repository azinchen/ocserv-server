name: CI - Build and Deploy

on:
  push:
    # Production builds: tags only -> push to both registries with latest tag
    # Development builds: master and other branches -> push only to GHCR
    branches: [ '**' ]
    tags: [ '**' ]
  pull_request:
    # Only PRs targeting master branch
    branches: [ master ]

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write  # Required for called security workflows to upload SARIF files

env:
  # Multi-platform builds for production (master/tags)
  PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/riscv64,linux/s390x"
  # Fast builds for development branches (amd64 only)
  DEV_PLATFORMS: "linux/amd64"  # Only build for amd64 on development branches for speed

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build and Deploy Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.git.outputs.image_tag }}
      is_tag: ${{ steps.git.outputs.is_tag }}
    steps:
      # === VALIDATION PHASE ===
      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: Validate required secrets
        shell: bash
        run: |
          echo "üîê Validating required secrets and environment..."
          
          # Check if required secrets are available for production builds (tags only)
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            if [[ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]] || [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
              echo "‚ùå DockerHub credentials not available for production build"
              exit 1
            fi
            if [[ -z "${{ secrets.DOCKERHUB_PASSWORD }}" ]]; then
              echo "‚ö†Ô∏è  DockerHub password not available - repo description update will be skipped"
            fi
          fi
          
          echo "‚úÖ Secret validation completed"

      # === BUILD CONFIGURATION PHASE ===
      - name: Get branch name and build metadata
        id: git
        shell: bash
        run: |
          # Determine if this is a tag or branch
          IS_TAG=${{ github.ref_type == 'tag' }}
          
          # Get clean branch/tag name
          if [[ "$IS_TAG" == "true" ]]; then
            # Remove 'v' prefix from tag name for production releases
            IMAGE_TAG=${GITHUB_REF_NAME#v}
            PLATFORMS="${{ env.PLATFORMS }}"  # Build all platforms for tags
            PUSH_TO_PROD=true
          elif [[ "$GITHUB_REF_NAME" == "master" ]]; then
            IMAGE_TAG="dev"  # Master branch tagged as 'dev'
            PLATFORMS="${{ env.PLATFORMS }}"  # Build all platforms for master
            PUSH_TO_PROD=false
          else
            # Sanitize branch name for Docker tag (replace / and other invalid chars with -)
            IMAGE_TAG=$(echo "${GITHUB_REF_NAME}" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^-\+\|-\+$//g')
            PLATFORMS="${{ env.DEV_PLATFORMS }}"  # Build only amd64 for dev branches
            PUSH_TO_PROD=false
          fi

          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "is_tag=${IS_TAG}" >> $GITHUB_OUTPUT
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
          echo "push_to_prod=${PUSH_TO_PROD}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

          echo "Action branch=${GITHUB_REF_NAME} tag=${IS_TAG} ref=${GITHUB_REF} image_tag=${IMAGE_TAG} platforms=${PLATFORMS}"

      # === AUTHENTICATION PHASE ===
      - name: Login to DockerHub
        if: ${{ steps.git.outputs.push_to_prod == 'true' }}
        uses: docker/login-action@v3.5.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # === DOCKER BUILD SETUP PHASE ===
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
        with:
          platforms: ${{ steps.git.outputs.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      # === BUILD AND PUSH PHASE ===
      - name: Build and push image (Development)
        if: ${{ steps.git.outputs.push_to_prod == 'false' }}
        uses: docker/build-push-action@v6.18.0
        with:
          platforms: ${{ steps.git.outputs.platforms }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            IMAGE_VERSION=${{ steps.git.outputs.image_tag }}
            BUILD_DATE=${{ steps.git.outputs.build_date }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.git.outputs.image_tag }}

      - name: Build and push image (Production)
        if: ${{ steps.git.outputs.push_to_prod == 'true' }}
        uses: docker/build-push-action@v6.18.0
        with:
          platforms: ${{ steps.git.outputs.platforms }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            IMAGE_VERSION=${{ steps.git.outputs.image_tag }}
            BUILD_DATE=${{ steps.git.outputs.build_date }}
          tags: |
            ${{ github.repository }}:${{ steps.git.outputs.image_tag }}
            ghcr.io/${{ github.repository }}:${{ steps.git.outputs.image_tag }}
            ${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:latest

      # === MONITORING AND METADATA PHASE ===
      - name: Get image size and metadata
        if: ${{ always() }}
        shell: bash
        run: |
          echo "üìä Image Build Metrics:"
          echo "- Image Tag: ${{ steps.git.outputs.image_tag }}"
          echo "- Platforms: ${{ steps.git.outputs.platforms }}"
          echo "- Production Build: ${{ steps.git.outputs.push_to_prod }}"
          echo "- Registry: ghcr.io/${{ github.repository }}:${{ steps.git.outputs.image_tag }}"
          
          # Get image size if possible
          if docker manifest inspect ghcr.io/${{ github.repository }}:${{ steps.git.outputs.image_tag }} >/dev/null 2>&1; then
            echo "‚úÖ Image successfully pushed and available"
          else
            echo "‚ö†Ô∏è  Image may still be propagating"
          fi

      # === REPOSITORY MAINTENANCE PHASE ===
      - name: Update repo description
        if: ${{ steps.git.outputs.is_tag == 'true' }}
        uses: peter-evans/dockerhub-description@v4.0.2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ github.repository }}
          short-description: ${{ github.event.repository.description }}

  # === SECURITY SCANNING PHASE ===
  security-scan-built-image:
    name: üîí Security Scan - Built Image
    needs: build-and-deploy
    if: ${{ always() && needs.build-and-deploy.result == 'success' }}
    uses: ./.github/workflows/security-docker.yml
    with:
      image_tag: ${{ needs.build-and-deploy.outputs.image_tag }}
      is_production_build: ${{ needs.build-and-deploy.outputs.is_tag == 'true' }}
    secrets: inherit
