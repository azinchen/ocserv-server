name: Maintenance - Registry Cleanup

on:
  schedule:
    # Run weekly on Sundays at 2:00 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (preview only)'
        required: false
        default: true
        type: boolean
      max_release_days:
        description: 'Maximum age in days for release tags'
        required: false
        default: '365'
        type: string
      max_dev_days:
        description: 'Maximum age in days for development tags'
        required: false
        default: '90'
        type: string
      protect_latest_per:
        description: 'Protection level for latest tags'
        required: false
        default: 'minor'
        type: choice
        options:
          - none
          - minor
          - patch

jobs:
  cleanup-registries:
    name: üßπ Cleanup Docker Registries
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for GHCR cleanup
    
    steps:
      - name: Check Docker Hub secrets
        id: check_dockerhub
        run: |
          DOCKERHUB_AVAILABLE="false"
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            DOCKERHUB_AVAILABLE="true"
            echo "‚úÖ Docker Hub secrets are configured"
          else
            echo "‚ö†Ô∏è  Docker Hub secrets are not set - Docker Hub cleanup will be skipped"
            if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
              echo "  - DOCKERHUB_USERNAME secret is missing"
            fi
            if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "  - DOCKERHUB_TOKEN secret is missing"
            fi
          fi
          echo "dockerhub_available=${DOCKERHUB_AVAILABLE}" >> $GITHUB_OUTPUT

      - name: Verify repository configuration
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Owner: ${{ github.repository_owner }}"
          echo "GHCR package will be: ocserv-server"
          echo "Docker Hub repo will be: ${{ github.repository_owner }}/ocserv-server"
          echo "Docker Hub cleanup: ${{ steps.check_dockerhub.outputs.dockerhub_available == 'true' && 'enabled' || 'disabled (secrets missing)' }}"

      - name: Download registry pruner script
        run: |
          curl -fsSL https://raw.githubusercontent.com/azinchen/container-registry-pruner/main/registry-prune.sh -o registry-prune.sh
          chmod +x registry-prune.sh

      - name: Set cleanup parameters
        id: params
        run: |
          # Default values for scheduled runs (conservative settings)
          DRY_RUN="false"
          MAX_RELEASE_DAYS="365"  # Keep release tags for 1 year
          MAX_DEV_DAYS="90"       # Keep dev tags for 3 months
          PROTECT_LATEST_PER="minor"  # Default protection level
          
          # Override with manual inputs if workflow_dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DRY_RUN="${{ inputs.dry_run }}"
            MAX_RELEASE_DAYS="${{ inputs.max_release_days }}"
            MAX_DEV_DAYS="${{ inputs.max_dev_days }}"
            PROTECT_LATEST_PER="${{ inputs.protect_latest_per }}"
          fi
          
          echo "dry_run=${DRY_RUN}" >> $GITHUB_OUTPUT
          echo "max_release_days=${MAX_RELEASE_DAYS}" >> $GITHUB_OUTPUT
          echo "max_dev_days=${MAX_DEV_DAYS}" >> $GITHUB_OUTPUT
          echo "protect_latest_per=${PROTECT_LATEST_PER}" >> $GITHUB_OUTPUT
          
          echo "Configuration:"
          echo "  Dry run: ${DRY_RUN}"
          echo "  Max release days: ${MAX_RELEASE_DAYS}"
          echo "  Max dev days: ${MAX_DEV_DAYS}"
          echo "  Protect latest per: ${PROTECT_LATEST_PER}"

      - name: Run registry cleanup (dry-run preview)
        if: steps.params.outputs.dry_run == 'true'
        run: |
          echo "üîç Running in DRY-RUN mode - no images will be deleted"
          
          # Prepare protect-latest-per argument
          PROTECT_ARG=""
          if [ "${{ steps.params.outputs.protect_latest_per }}" != "none" ]; then
            PROTECT_ARG="--protect-latest-per ${{ steps.params.outputs.protect_latest_per }}"
          fi
          
          # Always cleanup GHCR
          echo "Cleaning up GHCR..."
          ./registry-prune.sh \
            --ghcr-owner-type users \
            --ghcr-owner ${{ github.repository_owner }} \
            --ghcr-token ${{ github.token }} \
            --ghcr-package ocserv-server \
            --max-release-days ${{ steps.params.outputs.max_release_days }} \
            --max-dev-days ${{ steps.params.outputs.max_dev_days }} \
            ${PROTECT_ARG}
          
          # Only cleanup Docker Hub if secrets are available
          if [ "${{ steps.check_dockerhub.outputs.dockerhub_available }}" == "true" ]; then
            echo "Cleaning up Docker Hub..."
            ./registry-prune.sh \
              --docker-user ${{ secrets.DOCKERHUB_USERNAME }} \
              --docker-pass ${{ secrets.DOCKERHUB_TOKEN }} \
              --docker-namespace ${{ secrets.DOCKERHUB_USERNAME }} \
              --docker-repo ocserv-server \
              --max-release-days ${{ steps.params.outputs.max_release_days }} \
              --max-dev-days ${{ steps.params.outputs.max_dev_days }} \
              ${PROTECT_ARG}
          else
            echo "‚ö†Ô∏è  Skipping Docker Hub cleanup - secrets not available"
          fi

      - name: Run registry cleanup (execute)
        if: steps.params.outputs.dry_run == 'false'
        run: |
          echo "üóëÔ∏è  Running in EXECUTE mode - images will be deleted"
          
          # Prepare protect-latest-per argument
          PROTECT_ARG=""
          if [ "${{ steps.params.outputs.protect_latest_per }}" != "none" ]; then
            PROTECT_ARG="--protect-latest-per ${{ steps.params.outputs.protect_latest_per }}"
          fi
          
          # Always cleanup GHCR
          echo "Cleaning up GHCR..."
          ./registry-prune.sh \
            --ghcr-owner-type users \
            --ghcr-owner ${{ github.repository_owner }} \
            --ghcr-token ${{ github.token }} \
            --ghcr-package ocserv-server \
            --max-release-days ${{ steps.params.outputs.max_release_days }} \
            --max-dev-days ${{ steps.params.outputs.max_dev_days }} \
            ${PROTECT_ARG} \
            --execute \
            --yes
          
          # Only cleanup Docker Hub if secrets are available
          if [ "${{ steps.check_dockerhub.outputs.dockerhub_available }}" == "true" ]; then
            echo "Cleaning up Docker Hub..."
            ./registry-prune.sh \
              --docker-user ${{ secrets.DOCKERHUB_USERNAME }} \
              --docker-pass ${{ secrets.DOCKERHUB_TOKEN }} \
              --docker-namespace ${{ secrets.DOCKERHUB_USERNAME }} \
              --docker-repo ocserv-server \
              --max-release-days ${{ steps.params.outputs.max_release_days }} \
              --max-dev-days ${{ steps.params.outputs.max_dev_days }} \
              ${PROTECT_ARG} \
              --execute \
              --yes
          else
            echo "‚ö†Ô∏è  Skipping Docker Hub cleanup - secrets not available"
          fi

      - name: Cleanup summary
        if: always()
        run: |
          echo "‚úÖ Registry cleanup workflow completed"
          echo "Mode: ${{ steps.params.outputs.dry_run == 'true' && 'DRY-RUN (preview only)' || 'EXECUTE (images deleted)' }}"
          echo "Settings used:"
          echo "  - Max release tag age: ${{ steps.params.outputs.max_release_days }} days"
          echo "  - Max dev tag age: ${{ steps.params.outputs.max_dev_days }} days"
          echo "  - Protected tags: latest (default) + ${{ steps.params.outputs.protect_latest_per == 'none' && 'no version protection' || format('highest {0} per version', steps.params.outputs.protect_latest_per) }}"
          echo "  - GHCR cleanup: enabled"
          echo "  - Docker Hub cleanup: ${{ steps.check_dockerhub.outputs.dockerhub_available == 'true' && 'enabled' || 'skipped (secrets missing)' }}"
          echo "Registries processed:"
          echo "  - GHCR: ghcr.io/${{ github.repository_owner }}/ocserv-server"
          if [ "${{ steps.check_dockerhub.outputs.dockerhub_available }}" == "true" ]; then
            echo "  - Docker Hub: ${{ secrets.DOCKERHUB_USERNAME }}/ocserv-server"
          else
            echo "  - Docker Hub: skipped"
          fi
